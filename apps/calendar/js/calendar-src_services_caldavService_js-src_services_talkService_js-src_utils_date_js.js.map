{"version":3,"file":"calendar-src_services_caldavService_js-src_services_talkService_js-src_utils_date_js.js?v=180443dee34fcadc7094","mappings":"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","sources":["webpack:///calendar/src/models/consts.js","webpack:///calendar/src/services/caldavService.js","webpack:///calendar/src/services/talkService.js","webpack:///calendar/src/utils/attendee.js","webpack:///calendar/src/utils/date.js"],"sourcesContent":["/**\n * @copyright Copyright (c) 2020 Georg Ehrke\n *\n * @author Georg Ehrke <oc.list@georgehrke.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nconst COMPONENT_NAME_EVENT = 'VEVENT'\nconst COMPONENT_NAME_JOURNAL = 'VJOURNAL'\nconst COMPONENT_NAME_VTODO = 'VTODO'\n\nconst ITIP_MESSAGE_ADD = 'ADD'\nconst ITIP_MESSAGE_CANCEL = 'CANCEL'\nconst ITIP_MESSAGE_COUNTER = 'COUNTER'\nconst ITIP_MESSAGE_DECLINECOUNTER = 'DECLINECOUNTER'\nconst ITIP_MESSAGE_PUBLISH = 'PUBLISH'\nconst ITIP_MESSAGE_REFRESH = 'REFRESH'\nconst ITIP_MESSAGE_REPLY = 'REPLY'\nconst ITIP_MESSAGE_REQUEST = 'REQUEST'\n\nconst PRINCIPAL_PREFIX_USER = 'principal:principals/users/'\nconst PRINCIPAL_PREFIX_GROUP = 'principal:principals/groups/'\nconst PRINCIPAL_PREFIX_CIRCLE = 'principal:principals/circles/'\nconst PRINCIPAL_PREFIX_CALENDAR_RESOURCE = 'principal:principals/calendar-resources/'\nconst PRINCIPAL_PREFIX_CALENDAR_ROOM = 'principal:principals/calendar-rooms/'\n\nconst CALDAV_BIRTHDAY_CALENDAR = 'contact_birthdays'\n\nconst IMPORT_STAGE_DEFAULT = 'default'\nconst IMPORT_STAGE_IMPORTING = 'importing'\nconst IMPORT_STAGE_AWAITING_USER_SELECT = 'awaitingUserSelect'\nconst IMPORT_STAGE_PROCESSING = 'processing'\n\nexport {\n\tCOMPONENT_NAME_EVENT,\n\tCOMPONENT_NAME_JOURNAL,\n\tCOMPONENT_NAME_VTODO,\n\tITIP_MESSAGE_ADD,\n\tITIP_MESSAGE_CANCEL,\n\tITIP_MESSAGE_COUNTER,\n\tITIP_MESSAGE_DECLINECOUNTER,\n\tITIP_MESSAGE_PUBLISH,\n\tITIP_MESSAGE_REFRESH,\n\tITIP_MESSAGE_REPLY,\n\tITIP_MESSAGE_REQUEST,\n\tPRINCIPAL_PREFIX_USER,\n\tPRINCIPAL_PREFIX_GROUP,\n\tPRINCIPAL_PREFIX_CIRCLE,\n\tPRINCIPAL_PREFIX_CALENDAR_RESOURCE,\n\tPRINCIPAL_PREFIX_CALENDAR_ROOM,\n\tCALDAV_BIRTHDAY_CALENDAR,\n\tIMPORT_STAGE_DEFAULT,\n\tIMPORT_STAGE_IMPORTING,\n\tIMPORT_STAGE_AWAITING_USER_SELECT,\n\tIMPORT_STAGE_PROCESSING,\n}\n","/**\n * @copyright Copyright (c) 2020 Georg Ehrke\n *\n * @author Georg Ehrke <oc.list@georgehrke.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nimport DavClient from '@nextcloud/cdav-library'\nimport { generateRemoteUrl } from '@nextcloud/router'\nimport { getRequestToken } from '@nextcloud/auth'\nimport { CALDAV_BIRTHDAY_CALENDAR } from '../models/consts.js'\n\nconst clients = {}\n\nconst getClientKey = (headers) => JSON.stringify(headers)\n\nconst getClient = (headers = {}) => {\n\tconst clientKey = getClientKey(headers)\n\tif (clients[clientKey]) {\n\t\treturn clients[clientKey]\n\t}\n\n\tclients[clientKey] = new DavClient({\n\t\trootUrl: generateRemoteUrl('dav'),\n\t}, () => {\n\t\tconst mergedHeaders = {\n\t\t\t'X-Requested-With': 'XMLHttpRequest',\n\t\t\trequesttoken: getRequestToken(),\n\t\t\t'X-NC-CalDAV-Webcal-Caching': 'On',\n\t\t\t...headers,\n\t\t}\n\t\tconst xhr = new XMLHttpRequest()\n\t\tconst oldOpen = xhr.open\n\n\t\t// override open() method to add headers\n\t\txhr.open = function() {\n\t\t\tconst result = oldOpen.apply(this, arguments)\n\t\t\tfor (const name in mergedHeaders) {\n\t\t\t\txhr.setRequestHeader(name, mergedHeaders[name])\n\t\t\t}\n\n\t\t\treturn result\n\t\t}\n\n\t\tOC.registerXHRForErrorProcessing(xhr) // eslint-disable-line no-undef\n\t\treturn xhr\n\t})\n\n\treturn clients[clientKey]\n}\n\n/**\n * Initializes the client for use in the user-view\n */\nconst initializeClientForUserView = async () => {\n\tawait getClient().connect({ enableCalDAV: true })\n}\n\n/**\n * Initializes the client for use in the public/embed-view\n */\nconst initializeClientForPublicView = async () => {\n\tawait getClient()._createPublicCalendarHome()\n}\n\n/**\n * Fetch all calendars from the server\n *\n * @param {object} headers\n * @return {Promise<CalendarHome>}\n */\nconst getCalendarHome = (headers) => getClient(headers).calendarHomes[0]\n\n/**\n * Fetch all collections in the calendar home from the server\n *\n * @return {Promise<Collection[]>}\n */\nconst findAll = () => {\n\treturn getCalendarHome().findAllCalDAVCollectionsGrouped()\n}\n\n/**\n * Fetch all subscriptions in the calendar home from the server\n */\nexport const findAllSubscriptions = async () => {\n\tconst headers = {\n\t\t'X-NC-CalDAV-Webcal-Caching': 'Off',\n\t}\n\n\t// Ensure the client is initialized once\n\tawait getClient(headers).connect({ enableCalDAV: true })\n\n\treturn getCalendarHome(headers).findAllSubscriptions()\n}\n\n/**\n * Fetch all deleted calendars from the server\n *\n * @return {Promise<Calendar[]>}\n */\nconst findAllDeletedCalendars = () => {\n\treturn getCalendarHome().findAllDeletedCalendars()\n}\n\n/**\n * Fetch public calendars by their token\n *\n * @param {string[]} tokens List of tokens\n * @return {Promise<Calendar[]>}\n */\nconst findPublicCalendarsByTokens = async (tokens) => {\n\tconst findPromises = []\n\n\tfor (const token of tokens) {\n\t\tconst promise = getClient().publicCalendarHome\n\t\t\t.find(token)\n\t\t\t.catch(() => null) // Catch outdated tokens\n\n\t\tfindPromises.push(promise)\n\t}\n\n\tconst calendars = await Promise.all(findPromises)\n\treturn calendars.filter((calendar) => calendar !== null)\n}\n\n/**\n * Fetches all scheduling inboxes\n *\n * Nitpick detail: Technically, we shouldn't be querying all scheduling inboxes\n * in the calendar-home and just take the first one, but rather query the\n * \"CALDAV:schedule-inbox-URL\" property on the principal URL and take that one.\n * However, it doesn't make any difference for the Nextcloud CalDAV server\n * and saves us extraneous requests here.\n *\n * https://tools.ietf.org/html/rfc6638#section-2.2.1\n *\n * @return {Promise<ScheduleInbox[]>}\n */\nconst findSchedulingInbox = async () => {\n\tconst inboxes = await getCalendarHome().findAllScheduleInboxes()\n\treturn inboxes[0]\n}\n\n/**\n * Fetches all scheduling outboxes\n *\n * Nitpick detail: Technically, we shouldn't be querying all scheduling outboxes\n * in the calendar-home and just take the first one, but rather query the\n * \"CALDAV:schedule-outbox-URL\" property on the principal URL and take that one.\n * However, it doesn't make any difference for the Nextcloud CalDAV server\n * and saves us extraneous requests here.\n *\n * https://tools.ietf.org/html/rfc6638#section-2.1.1\n *\n * @return {Promise<ScheduleOutbox>}\n */\nconst findSchedulingOutbox = async () => {\n\tconst outboxes = await getCalendarHome().findAllScheduleOutboxes()\n\treturn outboxes[0]\n}\n\n/**\n * Creates a calendar\n *\n * @param {string} displayName Visible name\n * @param {string} color Color\n * @param {string[]} components Supported component set\n * @param {number} order Order of calendar in list\n * @param {string} timezoneIcs ICS representation of timezone\n * @return {Promise<Calendar>}\n */\nconst createCalendar = async (displayName, color, components, order, timezoneIcs) => {\n\treturn getCalendarHome().createCalendarCollection(displayName, color, components, order, timezoneIcs)\n}\n\n/**\n * Creates a subscription\n *\n * This function does not return a subscription, but a cached calendar\n *\n * @param {string} displayName Visible name\n * @param {string} color Color\n * @param {string} source Link to WebCAL Source\n * @param {number} order Order of calendar in list\n * @return {Promise<Calendar>}\n */\nconst createSubscription = async (displayName, color, source, order) => {\n\treturn getCalendarHome().createSubscribedCollection(displayName, color, source, order)\n}\n\n/**\n * Enables the birthday calendar\n *\n * @return {Promise<Calendar>}\n */\nconst enableBirthdayCalendar = async () => {\n\tawait getCalendarHome().enableBirthdayCalendar()\n\treturn getBirthdayCalendar()\n}\n\n/**\n * Gets the birthday calendar\n *\n * @return {Promise<Calendar>}\n */\nconst getBirthdayCalendar = async () => {\n\treturn getCalendarHome().find(CALDAV_BIRTHDAY_CALENDAR)\n}\n\n/**\n * Returns the Current User Principal\n *\n * @return {Principal}\n */\nconst getCurrentUserPrincipal = () => {\n\treturn getClient().currentUserPrincipal\n}\n\n/**\n * Finds calendar principals by displayname\n *\n * @param {string} term The search-term\n * @return {Promise<void>}\n */\nconst principalPropertySearchByDisplaynameOrEmail = async (term) => {\n\treturn getClient().principalPropertySearchByDisplaynameOrEmail(term)\n}\n\n/**\n * Performs a principal property search based on multiple advanced filters\n *\n * @param {object} query The destructuring query object\n * @param {string=} query.displayName The display name to search for\n * @param {number=} query.capacity The minimum required seating capacity\n * @param {string[]=} query.features The features to filter by\n * @param {string=} query.roomType The room type to filter by\n * @return {Promise<Principal[]>}\n */\nconst advancedPrincipalPropertySearch = async (query) => {\n\treturn getClient().advancedPrincipalPropertySearch(query)\n}\n\n/**\n * Finds one principal by it's URL\n *\n * @param {string} url The principal-url\n * @return {Promise<Principal>}\n */\nconst findPrincipalByUrl = async (url) => {\n\treturn getClient().findPrincipal(url)\n}\n\nexport {\n\tinitializeClientForUserView,\n\tinitializeClientForPublicView,\n\tfindAll,\n\tfindAllDeletedCalendars,\n\tfindPublicCalendarsByTokens,\n\tfindSchedulingInbox,\n\tfindSchedulingOutbox,\n\tcreateCalendar,\n\tcreateSubscription,\n\tenableBirthdayCalendar,\n\tgetBirthdayCalendar,\n\tgetCurrentUserPrincipal,\n\tprincipalPropertySearchByDisplaynameOrEmail,\n\tadvancedPrincipalPropertySearch,\n\tfindPrincipalByUrl,\n}\n","/**\n * @copyright Copyright (c) 2019 Georg Ehrke\n *\n * @author Team Popcorn <teampopcornberlin@gmail.com>\n *\n * @author Georg Ehrke <oc.list@georgehrke.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nimport HTTPClient from '@nextcloud/axios'\nimport { translate as t } from '@nextcloud/l10n'\nimport { generateUrl, generateOcsUrl } from '@nextcloud/router'\nimport { loadState } from '@nextcloud/initial-state'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport logger from '../utils/logger.js'\nimport { removeMailtoPrefix } from '../utils/attendee.js'\n\n/**\n * Creates a new public talk room\n *\n * @param {?string} eventTitle Title of the event\n * @param {?string} eventDescription Description of the event\n * @param {?string[]} attendees Attendees of the event\n *\n * @return {Promise<string>}\n */\nexport async function createTalkRoom(eventTitle = null, eventDescription = null, attendees = []) {\n\tconst apiVersion = loadState('calendar', 'talk_api_version')\n\ttry {\n\t\tconst response = await HTTPClient.post(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room', {\n\t\t\troomType: 3,\n\t\t\troomName: eventTitle || t('calendar', 'Chat room for event'),\n\t\t})\n\n\t\tconst conversation = response.data.ocs.data\n\t\tconst token = conversation.token\n\t\tif (eventDescription) {\n\t\t\tawait HTTPClient.put(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/description', {\n\t\t\t\tdescription: eventDescription,\n\t\t\t})\n\t\t}\n\n\t\treturn generateURLForToken(token)\n\t} catch (error) {\n\t\tconsole.debug(error)\n\t\tthrow error\n\t}\n}\n\n/**\n *\n * @param eventComponent\n */\nexport async function updateTalkParticipants(eventComponent) {\n\tconst apiVersion = loadState('calendar', 'talk_api_version')\n\tconst url = eventComponent.getConferenceList()[0]?.uri ?? eventComponent.location\n\tif (!url || !url.startsWith(window.location.protocol + '//' + window.location.host)) {\n\t\tlogger.debug('Event\\'s conference/location is from another host', url)\n\t\treturn\n\t}\n\tconst token = extractCallTokenFromUrl(url)\n\tif (!token) {\n\t\tlogger.debug('URL ' + url + ' contains no call token')\n\t\treturn\n\t}\n\ttry {\n\t\tconst { data: { ocs: { data: room } } } = await HTTPClient.get(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token)\n\t\tconst participantsResponse = await HTTPClient.get(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/participants')\n\t\t// Ignore if the actor isn't owner of the conversation\n\t\tif (!participantsResponse.data.ocs.data.some(participant => participant.actorId === getCurrentUser().uid && participant.participantType <= 2)) {\n\t\t\tlogger.debug('Current user is not a moderator or owner', { currentUser: getCurrentUser().uid, conversation: participantsResponse.data.ocs.data })\n\t\t\treturn\n\t\t}\n\t\tconsole.info('room', room)\n\n\t\tfor (const attendee of eventComponent.getAttendeeIterator()) {\n\t\t\tlogger.debug('Processing attendee', { attendee })\n\t\t\tif (['GROUP', 'RESOURCE', 'ROOM'].includes(attendee.userType)) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst participantId = removeMailtoPrefix(attendee.email)\n\t\t\ttry {\n\t\t\t\t// Map attendee email to Nextcloud user uid\n\t\t\t\tconst searchResult = await HTTPClient.get(generateOcsUrl('core/autocomplete/', 2) + 'get?search=' + encodeURIComponent(participantId) + '&itemType=&itemId=%20&shareTypes[]=0&limit=2')\n\t\t\t\t// Only map if there is exactly one result\n\t\t\t\tif (searchResult.data.ocs.data.length === 1 && searchResult.data.ocs.data[0].id !== getCurrentUser().uid) {\n\t\t\t\t\tawait HTTPClient.post(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/participants', {\n\t\t\t\t\t\tnewParticipant: searchResult.data.ocs.data[0].id,\n\t\t\t\t\t\tsource: 'users',\n\t\t\t\t\t})\n\t\t\t\t} else if (searchResult.data.ocs.data[0]?.id === getCurrentUser().uid) {\n\t\t\t\t\tlogger.debug('Skipping organizer ' + searchResult.data.ocs.data[0].id)\n\t\t\t\t} else if (room.type === 3) {\n\t\t\t\t\tawait HTTPClient.post(generateOcsUrl('apps/spreed/api/' + apiVersion + '/', 2) + 'room/' + token + '/participants', {\n\t\t\t\t\t\tnewParticipant: participantId,\n\t\t\t\t\t\tsource: 'emails',\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug('Attendee ' + participantId + ' ignored as Talk participant')\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tlogger.info('Could not add attendee ' + participantId + ' as Talk participant', { error })\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlogger.warn('Could not update Talk room attendees', { error })\n\t}\n}\n\n/**\n * Checks whether the value contains a talk link\n *\n * @param {?string} text Haystack\n * @return {boolean}\n */\nexport function doesContainTalkLink(text) {\n\tif (!text) {\n\t\treturn false\n\t}\n\n\t// TODO: there is most definitely a more reliable way,\n\t// but this works for now\n\tconst fakeUrl = generateURLForToken()\n\treturn text.includes(fakeUrl)\n}\n\n/**\n * Generates an absolute URL to the talk room based on the token\n *\n * @param {string} token The token to the call room\n * @return {string}\n */\nfunction generateURLForToken(token = '') {\n\treturn window.location.protocol + '//' + window.location.host + generateUrl('/call/' + token)\n}\n\n/**\n * Extract a spreed call token from the given URL\n *\n * @param {string} callUrl URL of the spreed call\n * @return {string|undefined} Matched token or undefined if URL is invalid\n */\nexport function extractCallTokenFromUrl(callUrl) {\n\treturn callUrl.match(/\\/call\\/([a-z0-9]*)(\\/|#.*)?$/)?.[1] ?? undefined\n}\n","/**\n * @copyright Copyright (c) 2021 Richard Steinmetz <richard@steinmetz.cloud>\n *\n * @author Richard Steinmetz <richard@steinmetz.cloud>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n/**\n * Remove the mailto prefix from a URI and return it\n *\n * @param {string} uri URI to remove the prefix from\n * @return {string} URI without a mailto prefix\n */\nexport function removeMailtoPrefix(uri) {\n\tif (typeof uri !== 'string') {\n\t\treturn ''\n\t}\n\n\tif (uri.startsWith('mailto:')) {\n\t\treturn uri.slice(7)\n\t}\n\n\treturn uri\n}\n\n/**\n * Add the mailto prefix to a URI if it doesn't have one yet and return it\n *\n * @param {string} uri URI to add the prefix to\n * @return {string} URI with a mailto prefix\n */\nexport function addMailtoPrefix(uri) {\n\tif (typeof uri !== 'string') {\n\t\treturn 'mailto:'\n\t}\n\n\tif (uri.startsWith('mailto:')) {\n\t\treturn uri\n\t}\n\n\treturn `mailto:${uri}`\n}\n\n/**\n * Get the display name of an organizer\n *\n * @param {?object} organizer Organizer object to extract a display name from\n * @return {string} Display name of given organizer\n */\nexport function organizerDisplayName(organizer) {\n\tif (!organizer) {\n\t\treturn ''\n\t}\n\n\tif (organizer.commonName) {\n\t\treturn organizer.commonName\n\t}\n\n\treturn removeMailtoPrefix(organizer.uri)\n}\n","/**\n * @copyright Copyright (c) 2019 Georg Ehrke\n *\n * @author Georg Ehrke <oc.list@georgehrke.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport logger from './logger.js'\n\n/**\n * returns a new Date object\n *\n * @return {Date}\n */\nexport function dateFactory() {\n\treturn new Date()\n}\n\n/**\n * formats a Date object as YYYYMMDD\n *\n * @param {Date} date Date to format\n * @return {string}\n */\nexport function getYYYYMMDDFromDate(date) {\n\treturn new Date(date.getTime() - (date.getTimezoneOffset() * 60000))\n\t\t.toISOString()\n\t\t.split('T')[0]\n}\n\n/**\n * get unix time from date object\n *\n * @param {Date} date Date to format\n * @return {number}\n */\nexport function getUnixTimestampFromDate(date) {\n\treturn Math.floor(date.getTime() / 1000)\n}\n\n/**\n * Gets a Date-object based on the firstday param used in routes\n *\n * @param {string} firstDayParam The firstday param from the router\n * @return {Date}\n */\nexport function getDateFromFirstdayParam(firstDayParam) {\n\tif (firstDayParam === 'now') {\n\t\treturn dateFactory()\n\t}\n\n\tconst [year, month, date] = firstDayParam.split('-')\n\t\t.map((str) => parseInt(str, 10))\n\n\tif (Number.isNaN(year) || Number.isNaN(month) || Number.isNaN(date)) {\n\t\tlogger.error('First day parameter contains non-numerical components, falling back to today')\n\t\treturn dateFactory()\n\t}\n\n\tconst dateObject = dateFactory()\n\tdateObject.setFullYear(year, month - 1, date)\n\tdateObject.setHours(0, 0, 0, 0)\n\n\treturn dateObject\n}\n\n/**\n * formats firstday param as YYYYMMDD\n *\n * @param {string} firstDayParam The firstday param from the router\n * @return {string}\n */\nexport function getYYYYMMDDFromFirstdayParam(firstDayParam) {\n\tif (firstDayParam === 'now') {\n\t\treturn getYYYYMMDDFromDate(dateFactory())\n\t}\n\n\treturn firstDayParam\n}\n\n/**\n * Gets a date object based on the given DateTimeValue\n * Ignores given timezone-information\n *\n * @param {DateTimeValue} dateTimeValue Value to get date from\n * @return {Date}\n */\nexport function getDateFromDateTimeValue(dateTimeValue) {\n\treturn new Date(\n\t\tdateTimeValue.year,\n\t\tdateTimeValue.month - 1,\n\t\tdateTimeValue.day,\n\t\tdateTimeValue.hour,\n\t\tdateTimeValue.minute,\n\t\t0,\n\t\t0,\n\t)\n}\n\n/**\n * modifies a date\n *\n * @param {Date} date Date object to modify\n * @param {object} data The destructuring object\n * @param {number} data.day Number of days to add\n * @param {number} data.week Number of weeks to add\n * @param {number} data.month Number of months to add\n * @param data.year\n * @return {Date}\n */\nexport function modifyDate(date, { day = 0, week = 0, month = 0, year = 0 }) {\n\tdate = new Date(date.getTime())\n\tdate.setDate(date.getDate() + day)\n\tdate.setDate(date.getDate() + week * 7)\n\tdate.setMonth(date.getMonth() + month)\n\tdate.setFullYear(date.getFullYear() + year)\n\n\treturn date\n}\n"],"names":["COMPONENT_NAME_EVENT","COMPONENT_NAME_JOURNAL","COMPONENT_NAME_VTODO","PRINCIPAL_PREFIX_USER","PRINCIPAL_PREFIX_GROUP","PRINCIPAL_PREFIX_CIRCLE","PRINCIPAL_PREFIX_CALENDAR_RESOURCE","PRINCIPAL_PREFIX_CALENDAR_ROOM","CALDAV_BIRTHDAY_CALENDAR","IMPORT_STAGE_DEFAULT","IMPORT_STAGE_IMPORTING","IMPORT_STAGE_AWAITING_USER_SELECT","IMPORT_STAGE_PROCESSING","clients","getClient","headers","arguments","length","undefined","clientKey","JSON","stringify","getClientKey","DavClient","rootUrl","generateRemoteUrl","mergedHeaders","requesttoken","getRequestToken","xhr","XMLHttpRequest","oldOpen","open","result","apply","this","name","setRequestHeader","OC","registerXHRForErrorProcessing","initializeClientForUserView","async","connect","enableCalDAV","initializeClientForPublicView","_createPublicCalendarHome","getCalendarHome","calendarHomes","findAll","findAllCalDAVCollectionsGrouped","findAllSubscriptions","findAllDeletedCalendars","findPublicCalendarsByTokens","findPromises","token","tokens","promise","publicCalendarHome","find","catch","push","Promise","all","filter","calendar","findSchedulingOutbox","findAllScheduleOutboxes","createCalendar","displayName","color","components","order","timezoneIcs","createCalendarCollection","createSubscription","source","createSubscribedCollection","enableBirthdayCalendar","getBirthdayCalendar","getCurrentUserPrincipal","currentUserPrincipal","principalPropertySearchByDisplaynameOrEmail","term","findPrincipalByUrl","findPrincipal","url","createTalkRoom","eventTitle","eventDescription","apiVersion","loadState","response","HTTPClient","post","generateOcsUrl","roomType","roomName","t","data","ocs","put","description","generateURLForToken","error","console","debug","updateTalkParticipants","eventComponent","_eventComponent$getCo","_eventComponent$getCo2","getConferenceList","uri","location","startsWith","window","protocol","host","logger","_callUrl$match$","_callUrl$match","match","room","get","participantsResponse","some","participant","actorId","getCurrentUser","uid","participantType","currentUser","conversation","info","attendee","getAttendeeIterator","includes","userType","participantId","removeMailtoPrefix","email","_searchResult$data$oc","searchResult","encodeURIComponent","id","newParticipant","type","warn","doesContainTalkLink","text","fakeUrl","generateUrl","slice","organizerDisplayName","organizer","commonName","dateFactory","Date","getYYYYMMDDFromDate","date","getTime","getTimezoneOffset","toISOString","split","getUnixTimestampFromDate","Math","floor","getDateFromFirstdayParam","firstDayParam","year","month","map","str","parseInt","Number","isNaN","dateObject","setFullYear","setHours","getYYYYMMDDFromFirstdayParam","getDateFromDateTimeValue","dateTimeValue","day","hour","minute","modifyDate","_ref","week","setDate","getDate","setMonth","getMonth","getFullYear"],"sourceRoot":""}